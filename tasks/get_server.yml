---
- name: Set server hostname as fact
  set_fact:
    k3s_server_hostname: "{{ groups['k3s_server'][0] }}"

- name: Set server address as fact
  set_fact:
    k3s_server_address: "{{ hostvars[k3s_server_hostname].ansible_default_ipv4.address }}"

- name: Check if node-token file exists on server
  stat:
    path: /var/lib/rancher/k3s/server/node-token
  register: k3s_server_node_token
  run_once: true
  delegate_to: "{{ k3s_server_hostname }}"

- name: Install service for server only
  template:
    src: "k3s.service.j2"
    dest: /etc/systemd/system/k3s.service
    owner: root
    group: root
    mode: 0644
  register: k3s_systemd_server_service_file
  when: inventory_hostname in groups['k3s_server']

- name: Start service on server only
  systemd:
    state: started
    name: k3s.service
    daemon_reload: yes    
  when: (inventory_hostname in groups['k3s_server']) and k3s_systemd_server_service_file.changed

- name: Wait until the file /var/lib/rancher/k3s/server/token is present before continuing
  wait_for:
    path: /var/lib/rancher/k3s/server/token
    timeout: 300
  when: (inventory_hostname in groups['k3s_server']) and k3s_systemd_server_service_file.changed

#- name: Start k3s server to get node token
#  command: k3s server
#  async: 300
#  run_once: true
#  delegate_to: "{{ k3s_server_hostname }}"
#  when: not k3s_server_node_token.stat.exists
#  ignore_errors: true

- name: Read node-token from server
  slurp:
    src: /var/lib/rancher/k3s/server/token
  register: token
  run_once: true
  delegate_to: "{{ k3s_server_hostname }}"

- name: Set node-token as fact
  set_fact:
    k3s_node_token: "{{ token['content'] | b64decode }}"
